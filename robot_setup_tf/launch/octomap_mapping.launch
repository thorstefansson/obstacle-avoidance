<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>


	<include file = "$(find simulation)/launch/both.launch" />

	<node pkg="robot_setup_tf" type="tf_robot" name="tf_robot" output="screen" />
	<node pkg="robot_setup_tf" type="tf_broadcaster" name="tf_broadcaster" output="screen" />
	<node pkg="robot_setup_tf" type="laser_octomap" name="laser_octomap" output="screen" />

	<node pkg="rviz" type="rviz" name="rviz" />

	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.05" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="world" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="5.0" />
		
		<!-- data source to integrate (PointCloud2) -->
		<!-- <remap from="cloud_in" to="/laser_cloud" /> -->
		<remap from="cloud_in" to="/camera/depth/points" /> 
	</node>

</launch>
